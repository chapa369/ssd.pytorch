"""Meter for monitoring mean average precision

inspired by
https://github.com/torchnet/torchnet/blob/f1d43f6a31d56072c88fecf4d255fca2dccc7458/meter/mapmeter.lua

Ellis Brown, Max deGroot
"""

import torch
from . import meter, APMeter
import numpy as np
import math

class mAPMeter(meter.Meter):
    """Mean Average Precision Meter"""
    def __init__(self):
        self.apmeter = APMeter()

    def reset(self):
        """Resets the meter's APMeter"""
        self.apmeter.reset()

    def add(self, output, target, weight=None):
        """
        Args:
            output (Tensor): NxK tensor that for each of the N examples
                indicates the probability of the example belonging to each of
                the K classes, according to the model. The probabilities should
                sum to one over all classes
            target (Tensor): binary NxK tensort that encodes which of the K
                classes are associated with the N-th input
                    (eg: a row [0, 1, 0, 1] indicates that the example is
                         associated with classes 2 and 4)
            weight (optional, Tensor): Nx1 tensor representing the weight for
                each example (each weight > 0)
        """
        self.apmeter.add(output, target, weight)

    def value(self):
        """Returns the mean average precision value generated by the APMeter"""
        return self.apmeter.value().mean()
